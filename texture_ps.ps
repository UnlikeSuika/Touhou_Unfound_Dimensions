////////////////////////////////////////////////////////////////////////////////
// Filename: texture.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer PixelShaderCBuffer{
	float4 hueColor;
	float alphaBlendAmount;
	bool xFlip;
	bool yFlip;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float2 outputCoord;
	
	if(xFlip){
		outputCoord.x = -input.tex.x;
	}
	else{
		outputCoord.x = input.tex.x;
	}
	if(yFlip){
		outputCoord.y = -input.tex.y;
	}
	else{
		outputCoord.y = input.tex.y;
	}
	
    // Sample the pixel color from the texture using the sampler at this texture coordinate location.

    textureColor = shaderTexture.Sample(SampleType, outputCoord);
	textureColor.a = textureColor.a*alphaBlendAmount;
	
	textureColor.r = textureColor.r + (hueColor.r - textureColor.r)*hueColor.a;
	textureColor.g = textureColor.g + (hueColor.g - textureColor.g)*hueColor.a;
	textureColor.b = textureColor.b + (hueColor.b - textureColor.b)*hueColor.a;
	
    return textureColor;
}
